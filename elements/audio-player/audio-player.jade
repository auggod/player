link(rel="import" href="../../bower_components/polymer/polymer.html")
link(rel="import" href="../play-button/play-button.html")
link(rel="import" href="../player-data/player-data.html")
link(rel="import" href="../progress-bar/progress-bar.html")
link(rel="import" href="../player-timer/player-timer.html")
link(rel="import" href="../../bower_components/iron-ajax/iron-ajax.html")

dom-module(id="audio-player")

  template
    style
      :stylus
        :host
          display flex
          padding 10px
          margin-bottom 20px
          border-radius 4px
          background RGBA(46, 66, 184, 1)
          color #fff
        img.play-button
          border-radius 50%
        .progress-seeker
          position absolute
          top 0
          cursor pointer
          z-index 10
          width 100%
          height 100%

    iron-ajax(
      id="ajax"
      auto
      url="{{uri}}"
      params='{{ajaxParams}}'
      handle-as="json"
      debounce-duration="300"
      on-response="onResponse"
    )

    play-button(on-click="playPause" paused="[[paused]]" playing="[[playing]]" artwork="[[artwork]]")

    

    player-data(track="[[data]]") 
      player-timer(time="[[_secondesToMinutesAndSeconds(currentTime)]]")
      progress-bar(progress="[[progress]]")
        .progress-seeker(on-click='seek')
      player-timer(time="[[_secondesToMinutesAndSeconds(duration)]]")

    content

  script
    :livescript
      audio = document.createElement('audio')

      Polymer do
        is: \audio-player

        ready: ->
          @name = "Audio player"

          @parentNode.addEventListener 'play', ((e) ->
            if @playing and e.detail.playing != @src
              @pausedAt = @currentTime
              @playPause!
          ).bind(@)

        listeners:
          'click': 'handleClick'
          'play': 'handlePlay'
          'pause': 'handlePause'

        handleClick: (e) ->
          console.log e

        handlePlay: (e) ->
          console.log 'play', @data.title, e

        handlePause: (e) ->
          console.log 'pause', @data.title, e

        hostAttributes:
          tabindex: 0

        onResponse: (request) ->
          @data = request.detail.response
          @src = @data.stream_url + '?client_id=' + @soundcloudClientId

        properties:
          progress:
            type: Number
          duration:
            type: Number
            notify: true
          currentTime:
            type: Number
            notify: true
          data:
            type: Object
            notify: true
          artwork:
            type: String
            computed: '_computeArtworkUrl(data)'
            readOnly: true
          uri:
            type: String
            value: 'https://api.soundcloud.com/resolve'
          url:
            type: String
            notify: true
          src:
            type: String
            notify: true
          soundcloudClientId:
            type: String
            value: \d97078ee059112b89104629451ea6cf1
          playing:
            type: Boolean
            notify: true
            value: false
          paused:
            type: Boolean
            notify: true
            value: false
          pausedAt:
            type: Number
            notify: true
          ajaxParams:
            type: Object
            computed: '_computeAjaxParams(url, soundcloudClientId)'

        _computeArtworkUrl: (data) ->
          data.artwork_url or data.user.avatar_url

        _secondesToMinutesAndSeconds: (seconds) ->
          if @playing != @src or !@playing
            return

          minutes = Math.floor(seconds / 60)
          minutes = if minutes >= 10 then minutes else '0' + minutes        
          seconds = Math.floor(seconds % 60)
          seconds = if seconds >= 10 then seconds else '0' + seconds         
          minutes + ':' + seconds

        _computeAjaxParams: (url, soundcloudClientId) ->
          do
            url: url
            client_id: soundcloudClientId

        play: ->
          audio.src = @src
          audio.currentTime = @pausedAt || 0
          audio.play!
          @playing = @src

        pause: ->
          audio.pause!

          @pausedAt = @currentTime

          @fire('pause', pausedAt: @pausedAt)

          @playing = false

        playPause: (e) ->

          self = @

          if @currentTime == audio.duration
            audio.currentTime = 0
            @currentTime = 0
            @pausedAt = @currentTime

          unless @playing

            @fire('play', playing: @src)

            @play!
            @duration = @data.duration / 1000.0

            interval = setInterval ->

              if self.currentTime == audio.duration
                self.pausedAt = self.currentTime
                self.pause!
                clearInterval(interval)         

              if self.playing
                self.currentTime = audio.currentTime
                progress = 100 * self.currentTime / self.duration
                self.set('progress', progress)
              else
                clearInterval(interval) 

            , 1000         

          else
            @pause!

            clearInterval(interval)

        seek: (e) ->
          unless audio.src == @src
            return false
          unless audio.readyState
            return false
          percent = e.offsetX / e.target.offsetWidth or (e.layerX - e.target.offsetLeft) / e.target.offsetWidth
          time = percent * audio.duration or 0
          audio.currentTime = time
          @pausedAt = audio.currentTime
