link(rel="import" href="../../bower_components/polymer/polymer.html")
link(rel="import" href="../play-button/play-button.html")
link(rel="import" href="../player-data/player-data.html")
link(rel="import" href="../progress-bar/progress-bar.html")
link(rel="import" href="../player-timer/player-timer.html")
link(rel="import" href="../../bower_components/iron-ajax/iron-ajax.html")

dom-module(id="audio-player")

  template
    style
      :stylus
        :host
          display flex
          padding 10px
          margin-bottom 20px
          border-radius 4px
          background RGBA(46, 66, 184, 1)
          color #fff
        img.play-button
          border-radius 50%
        .progress-seeker
          position absolute
          top 0
          cursor pointer
          z-index 10
          width 100%
          height 100%

    iron-ajax(
      id="ajax"
      auto
      url="{{uri}}"
      params='{{ajaxParams}}'
      handle-as="json"
      debounce-duration="300"
      on-response="onResponse"
    )

    play-button(on-click="playPause" paused="[[paused]]" playing="[[playing]]" artwork="[[artwork]]")

    

    player-data(track="[[data]]") 
      player-timer(time="[[_secondesToMinutesAndSeconds(currentTime)]]")
      progress-bar(progress="[[progress]]")
        .progress-seeker(on-click='seek')
      player-timer(time="[[_secondesToMinutesAndSeconds(duration)]]")

    content

  script
    :livescript
      audio = document.createElement('audio')

      Polymer do
        is: \audio-player

        ready: ->
          @name = "Audio player"

        hostAttributes:
          tabindex: 0

        onResponse: (request) ->
          @data = request.detail.response
          @src = @data.stream_url + '?client_id=' + @soundcloudClientId

          @duration = @data.duration / 1000.0
          
        properties:
          progress:
            type: Number
            notify: true
          duration:
            type: Number
            notify: true
            value: 0
          currentTime:
            type: Number
            observer: '_currentTimeChanged'
            notify: true
            value: 0
          data:
            type: Object
            notify: true
            reflectToAttribute: true
          artwork:
            type: String
            notify: true
            computed: '_computeArtworkUrl(data)'
            readOnly: true
            reflectToAttribute: true
          uri:
            type: String
            value: 'https://api.soundcloud.com/resolve'
          url:
            type: String
            notify: true
          src:
            type: String
            notify: true
          soundcloudClientId:
            type: String
            value: \d97078ee059112b89104629451ea6cf1
          playing:
            type: Boolean
            notify: true
            value: false
          paused:
            type: Boolean
            notify: true
            value: false
          ajaxParams:
            type: Object
            computed: '_computeAjaxParams(url, soundcloudClientId)'

        _computeArtworkUrl: (data) ->
          data.artwork_url || data.user.avatar_url

        _secondesToMinutesAndSeconds: (seconds) ->
          minutes = Math.floor(seconds / 60)
          minutes = if minutes >= 10 then minutes else '0' + minutes        
          seconds = Math.floor(seconds % 60)
          seconds = if seconds >= 10 then seconds else '0' + seconds         
          minutes + ':' + seconds

        _currentTimeChanged: (newValue, oldValue) ->
          @currentTime = audio.currentTime

          progress = 100 * @currentTime / @duration
          
          if @src == audio.src
            @set('progress', progress)

        _computeAjaxParams: (url, soundcloudClientId) ->
          do
            url: url
            client_id: soundcloudClientId

        play: ->
          if @src != audio.src          
            audio.src = @src
          if @paused
            audio.currentTime = @paused
          audio.play!
          @playing = true

        pause: ->
          audio.pause!

          @paused = @currentTime

          @playing = false

        playPause: (e) ->

          self = @

          unless @playing

            interval = setInterval ->

              if self.currentTime == self.data.duration
                clearInterval(interval)
                self.pause!

              self.currentTime = audio.currentTime


            , 1000

            @play!

          else

            clearInterval(interval)

            @pause!

        seek: (e) ->
          unless audio.readyState
            return false
          percent = e.offsetX / e.target.offsetWidth or (e.layerX - e.target.offsetLeft) / e.target.offsetWidth
          time = percent * audio.duration or 0
          audio.currentTime = time
