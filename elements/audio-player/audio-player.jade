link(rel="import" href="../../bower_components/polymer/polymer.html")
link(rel="import" href="../play-button/play-button.html")
link(rel="import" href="../player-data/player-data.html")
link(rel="import" href="../progress-bar/progress-bar.html")
link(rel="import" href="../player-timer/player-timer.html")

dom-module(id="audio-player")

  template
    style
      :stylus(minify=true)
        :host
          display flex
          flex-direction column
          padding 10px
          margin-bottom 20px
          border-radius 4px
          background RGBA(46, 66, 184, 1)
          color #fff
        img.play-button
          border-radius 50%
        .progress-seeker
          position absolute
          top 0
          cursor pointer
          z-index 10
          width 100%
          height 100%
        player-metas
          margin 10px
          flex 1
          display flex
          flex-direction column

    player-data(track="[[data]]") 
      play-button(on-click="playPause" paused="[[paused]]" playing="[[playing]]" artwork="[[artwork]]")
      player-metas
        span.user {{data.user.username}}
        span.title {{data.title}}
      player-timer(time="[[_secondesToMinutesAndSeconds(currentTime)]]")
      progress-bar(progress="[[progress]]")
        .progress-seeker(on-click='seek')
      player-timer(time="[[_secondesToMinutesAndSeconds(duration)]]")

    content

  script
    :livescript
      audio = document.createElement('audio')

      Polymer do
        is: \audio-player

        ready: ->
          @name = "Audio player"
          
          window.onhashchange = ((e) ->
            console.log e
          ).bind(@)

          window.onpopstate = ((e) ->
            console.log e
          ).bind(@)

          document.addEventListener 'pause', ((e) ->
            if e.detail.playing == @src
              @playing = false
          ).bind(@)

          document.addEventListener 'play', ((e) ->
            if @playing and e.detail.playing != @src
              @pausedAt = @currentTime
              @playPause!
          ).bind(@)

        listeners:
          'keydown': 'handleKeyDown'
          'click': 'handleClick'
          'play': 'handlePlay'
          'pause': 'handlePause'

        handleKeyDown: (e) ->
          if e.keyCode == 32
            @playPause!

        handleClick: (e) ->
          console.log e

        handlePlay: (e) ->
          console.log 'play', @data.title, e

        handlePause: (e) ->
          console.log 'pause', @data.title, e

        hostAttributes:
          tabindex: 0

        properties:
          tracks:
            type: Array
          progress:
            type: Number
          duration:
            type: Number
            notify: true
          currentTime:
            type: Number
            notify: true
          data:
            type: Object
            notify: true
          streamable:
            type: Boolean
            value: true
          artwork:
            type: String
            notify: true
          src:
            type: String
            notify: true
          playing:
            type: Boolean
            notify: true
            value: false
          paused:
            type: Boolean
            notify: true
            value: false
          pausedAt:
            type: Number
            notify: true

        _secondesToMinutesAndSeconds: (seconds) ->
          if !@playing and @playing != @src
            return

          minutes = Math.floor(seconds / 60)
          minutes = if minutes >= 10 then minutes else '0' + minutes        
          seconds = Math.floor(seconds % 60)
          seconds = if seconds >= 10 then seconds else '0' + seconds         
          minutes + ':' + seconds

        play: ->
          audio.src = @src
          audio.currentTime = @pausedAt || 0
          audio.play!
          @playing = @src
          unless self.tracks
            @duration = @data.duration / 1000.0
          else
            @duration = audio.duration

        pause: ->
          audio.pause!

          @pausedAt = @currentTime

          @fire('pause', {
            pausedAt: @pausedAt
            playing: @src          
          })

          @playing = false

        setTimer: (speed = 1000) ->
          self = @
          interval = setInterval ->
            if self.currentTime == audio.duration
              self.pausedAt = self.currentTime
              self.pause!
              console.log @
              clearInterval(interval)       

              if self.tracks
                console.log 'This is a playlist'
                console.log self.tracks
                console.log 'index', _.findIndex(self.tracks, 'title': self.data.title)

            else if self.playing == self.src           
              self.currentTime = audio.currentTime
              if not self.tracks then progress = 100 * self.currentTime / self.duration else progress = 100 * self.currentTime / audio.duration
              self.set('progress', progress)
            else             
              clearInterval(interval) 
          , speed 

        playPause: (e) ->

          self = @

          if audio.readyState and @currentTime == audio.duration
            audio.currentTime = 0
            @currentTime = 0
            @pausedAt = @currentTime

          unless @playing

            @fire('play', playing: @src)

            @play!
            @setTimer!   

          else
            @pause!

        seek: (e) ->
          percent = e.offsetX / e.target.offsetWidth or (e.layerX - e.target.offsetLeft) / e.target.offsetWidth
          time = percent * @duration or 0
          audio.currentTime = time
          @pausedAt = audio.currentTime
          unless audio.src == @src
            @playPause!
